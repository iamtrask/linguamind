# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nlp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nlp')
    _nlp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nlp', [dirname(__file__)])
        except ImportError:
            import _nlp
            return _nlp
        try:
            _mod = imp.load_module('_nlp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nlp = swig_import_helper()
    del swig_import_helper
else:
    import _nlp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nlp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _nlp.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _nlp.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _nlp.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _nlp.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _nlp.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _nlp.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _nlp.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _nlp.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _nlp.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _nlp.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _nlp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _nlp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _nlp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _nlp.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _nlp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _nlp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _nlp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _nlp.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _nlp.vectori___nonzero__(self)

    def __bool__(self) -> "bool":
        return _nlp.vectori___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _nlp.vectori___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _nlp.vectori___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _nlp.vectori___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _nlp.vectori___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _nlp.vectori___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _nlp.vectori___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _nlp.vectori___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _nlp.vectori_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _nlp.vectori_append(self, x)

    def empty(self) -> "bool":
        return _nlp.vectori_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _nlp.vectori_size(self)

    def swap(self, v: 'vectori') -> "void":
        return _nlp.vectori_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _nlp.vectori_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _nlp.vectori_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _nlp.vectori_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _nlp.vectori_rend(self)

    def clear(self) -> "void":
        return _nlp.vectori_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _nlp.vectori_get_allocator(self)

    def pop_back(self) -> "void":
        return _nlp.vectori_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _nlp.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _nlp.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _nlp.vectori_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _nlp.vectori_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _nlp.vectori_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _nlp.vectori_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _nlp.vectori_resize(self, *args)

    def insert(self, *args) -> "void":
        return _nlp.vectori_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _nlp.vectori_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _nlp.vectori_capacity(self)
    __swig_destroy__ = _nlp.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _nlp.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _nlp.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _nlp.vectord___nonzero__(self)

    def __bool__(self) -> "bool":
        return _nlp.vectord___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _nlp.vectord___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _nlp.vectord___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _nlp.vectord___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _nlp.vectord___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _nlp.vectord___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _nlp.vectord___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _nlp.vectord___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _nlp.vectord_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _nlp.vectord_append(self, x)

    def empty(self) -> "bool":
        return _nlp.vectord_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _nlp.vectord_size(self)

    def swap(self, v: 'vectord') -> "void":
        return _nlp.vectord_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _nlp.vectord_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _nlp.vectord_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _nlp.vectord_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _nlp.vectord_rend(self)

    def clear(self) -> "void":
        return _nlp.vectord_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _nlp.vectord_get_allocator(self)

    def pop_back(self) -> "void":
        return _nlp.vectord_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _nlp.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _nlp.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _nlp.vectord_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _nlp.vectord_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _nlp.vectord_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _nlp.vectord_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _nlp.vectord_resize(self, *args)

    def insert(self, *args) -> "void":
        return _nlp.vectord_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _nlp.vectord_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _nlp.vectord_capacity(self)
    __swig_destroy__ = _nlp.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _nlp.vectord_swigregister
vectord_swigregister(vectord)

class charp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nlp.new_charp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nlp.delete_charp
    __del__ = lambda self: None

    def assign(self, value: 'char') -> "void":
        return _nlp.charp_assign(self, value)

    def value(self) -> "char":
        return _nlp.charp_value(self)

    def cast(self) -> "char *":
        return _nlp.charp_cast(self)
    if _newclass:
        frompointer = staticmethod(_nlp.charp_frompointer)
    else:
        frompointer = _nlp.charp_frompointer
charp_swigregister = _nlp.charp_swigregister
charp_swigregister(charp)

def charp_frompointer(t: 'char *') -> "charp *":
    return _nlp.charp_frompointer(t)
charp_frompointer = _nlp.charp_frompointer

class Term(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Term, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Term, name)
    __repr__ = _swig_repr
    __swig_setmethods__["letters"] = _nlp.Term_letters_set
    __swig_getmethods__["letters"] = _nlp.Term_letters_get
    if _newclass:
        letters = _swig_property(_nlp.Term_letters_get, _nlp.Term_letters_set)
    __swig_setmethods__["parent"] = _nlp.Term_parent_set
    __swig_getmethods__["parent"] = _nlp.Term_parent_get
    if _newclass:
        parent = _swig_property(_nlp.Term_parent_get, _nlp.Term_parent_set)
    __swig_setmethods__["left"] = _nlp.Term_left_set
    __swig_getmethods__["left"] = _nlp.Term_left_get
    if _newclass:
        left = _swig_property(_nlp.Term_left_get, _nlp.Term_left_set)
    __swig_setmethods__["right"] = _nlp.Term_right_set
    __swig_getmethods__["right"] = _nlp.Term_right_get
    if _newclass:
        right = _swig_property(_nlp.Term_right_get, _nlp.Term_right_set)
    __swig_setmethods__["count"] = _nlp.Term_count_set
    __swig_getmethods__["count"] = _nlp.Term_count_get
    if _newclass:
        count = _swig_property(_nlp.Term_count_get, _nlp.Term_count_set)
    __swig_setmethods__["binary"] = _nlp.Term_binary_set
    __swig_getmethods__["binary"] = _nlp.Term_binary_get
    if _newclass:
        binary = _swig_property(_nlp.Term_binary_get, _nlp.Term_binary_set)
    __swig_setmethods__["output"] = _nlp.Term_output_set
    __swig_getmethods__["output"] = _nlp.Term_output_get
    if _newclass:
        output = _swig_property(_nlp.Term_output_get, _nlp.Term_output_set)

    def __init__(self):
        this = _nlp.new_Term()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nlp.delete_Term
    __del__ = lambda self: None
Term_swigregister = _nlp.Term_swigregister
Term_swigregister(Term)

class Vocab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vocab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vocab, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nlp.new_Vocab(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["size"] = _nlp.Vocab_size_set
    __swig_getmethods__["size"] = _nlp.Vocab_size_get
    if _newclass:
        size = _swig_property(_nlp.Vocab_size_get, _nlp.Vocab_size_set)
    __swig_setmethods__["vocab_buffer_size"] = _nlp.Vocab_vocab_buffer_size_set
    __swig_getmethods__["vocab_buffer_size"] = _nlp.Vocab_vocab_buffer_size_get
    if _newclass:
        vocab_buffer_size = _swig_property(_nlp.Vocab_vocab_buffer_size_get, _nlp.Vocab_vocab_buffer_size_set)
    __swig_setmethods__["vocab"] = _nlp.Vocab_vocab_set
    __swig_getmethods__["vocab"] = _nlp.Vocab_vocab_get
    if _newclass:
        vocab = _swig_property(_nlp.Vocab_vocab_get, _nlp.Vocab_vocab_set)
    __swig_setmethods__["hash_size"] = _nlp.Vocab_hash_size_set
    __swig_getmethods__["hash_size"] = _nlp.Vocab_hash_size_get
    if _newclass:
        hash_size = _swig_property(_nlp.Vocab_hash_size_get, _nlp.Vocab_hash_size_set)
    __swig_setmethods__["hash_table"] = _nlp.Vocab_hash_table_set
    __swig_getmethods__["hash_table"] = _nlp.Vocab_hash_table_get
    if _newclass:
        hash_table = _swig_property(_nlp.Vocab_hash_table_get, _nlp.Vocab_hash_table_set)
    __swig_getmethods__["unigram_table_size"] = _nlp.Vocab_unigram_table_size_get
    if _newclass:
        unigram_table_size = _swig_property(_nlp.Vocab_unigram_table_size_get)
    __swig_setmethods__["unigram_table"] = _nlp.Vocab_unigram_table_set
    __swig_getmethods__["unigram_table"] = _nlp.Vocab_unigram_table_get
    if _newclass:
        unigram_table = _swig_property(_nlp.Vocab_unigram_table_get, _nlp.Vocab_unigram_table_set)
    __swig_setmethods__["tree"] = _nlp.Vocab_tree_set
    __swig_getmethods__["tree"] = _nlp.Vocab_tree_get
    if _newclass:
        tree = _swig_property(_nlp.Vocab_tree_get, _nlp.Vocab_tree_set)
    __swig_setmethods__["paths"] = _nlp.Vocab_paths_set
    __swig_getmethods__["paths"] = _nlp.Vocab_paths_get
    if _newclass:
        paths = _swig_property(_nlp.Vocab_paths_get, _nlp.Vocab_paths_set)
    __swig_setmethods__["codes"] = _nlp.Vocab_codes_set
    __swig_getmethods__["codes"] = _nlp.Vocab_codes_get
    if _newclass:
        codes = _swig_property(_nlp.Vocab_codes_get, _nlp.Vocab_codes_set)

    def sort(self, min_count: 'int') -> "void":
        return _nlp.Vocab_sort(self, min_count)

    def addTerm(self, term: 'char *') -> "int":
        return _nlp.Vocab_addTerm(self, term)

    def getTermHash(self, term: 'char *') -> "unsigned int":
        return _nlp.Vocab_getTermHash(self, term)

    def getTermAtIndex(self, i: 'int') -> "Term *":
        return _nlp.Vocab_getTermAtIndex(self, i)

    def getTermIndex(self, term: 'char *') -> "int":
        return _nlp.Vocab_getTermIndex(self, term)

    def getUnigramValue(self, index: 'int') -> "int":
        return _nlp.Vocab_getUnigramValue(self, index)

    def InitUnigramTable(self) -> "void":
        return _nlp.Vocab_InitUnigramTable(self)

    def createBinaryTree(self) -> "void":
        return _nlp.Vocab_createBinaryTree(self)

    def getPathSize(self, i: 'int') -> "int":
        return _nlp.Vocab_getPathSize(self, i)

    def getCodeSize(self, i: 'int') -> "int":
        return _nlp.Vocab_getCodeSize(self, i)

    def getPath(self, i: 'int', j: 'int') -> "int":
        return _nlp.Vocab_getPath(self, i, j)

    def getCode(self, i: 'int', j: 'int') -> "bool":
        return _nlp.Vocab_getCode(self, i, j)

    def getPathReference(self, i: 'int') -> "std::vector< int,std::allocator< int > > &":
        return _nlp.Vocab_getPathReference(self, i)

    def getCodeReference(self, i: 'int') -> "Vector *":
        return _nlp.Vocab_getCodeReference(self, i)
    __swig_destroy__ = _nlp.delete_Vocab
    __del__ = lambda self: None
Vocab_swigregister = _nlp.Vocab_swigregister
Vocab_swigregister(Vocab)

class Text(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr

    def __init__(self, filepath: 'char *', vocab: 'Vocab'):
        this = _nlp.new_Text(filepath, vocab)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["filepath"] = _nlp.Text_filepath_set
    __swig_getmethods__["filepath"] = _nlp.Text_filepath_get
    if _newclass:
        filepath = _swig_property(_nlp.Text_filepath_get, _nlp.Text_filepath_set)
    __swig_setmethods__["vocab"] = _nlp.Text_vocab_set
    __swig_getmethods__["vocab"] = _nlp.Text_vocab_get
    if _newclass:
        vocab = _swig_property(_nlp.Text_vocab_get, _nlp.Text_vocab_set)
    __swig_setmethods__["sentences"] = _nlp.Text_sentences_set
    __swig_getmethods__["sentences"] = _nlp.Text_sentences_get
    if _newclass:
        sentences = _swig_property(_nlp.Text_sentences_get, _nlp.Text_sentences_set)

    def ChangeVocab(self, new_vocab: 'Vocab') -> "void":
        return _nlp.Text_ChangeVocab(self, new_vocab)

    def cacheTokensInMemoryAsIndices(self) -> "void":
        return _nlp.Text_cacheTokensInMemoryAsIndices(self)

    def ReadWord(self, word: 'char *', fin: 'FILE *') -> "void":
        return _nlp.Text_ReadWord(self, word, fin)
    __swig_destroy__ = _nlp.delete_Text
    __del__ = lambda self: None
Text_swigregister = _nlp.Text_swigregister
Text_swigregister(Text)

# This file is compatible with both classic and new-style classes.


